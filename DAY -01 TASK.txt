   1)Difference between HTTP1.1 vs HTTP2

-> The first usable version of HTTP was created in 1997. Because it went through several stages of development,
   this first version of HTTP was called HTTP/1.1. This version is still use on the web.

-> In 2015, a new version of HTTP called HTTP/2 was created. HTTP/2 solves several problems that creators of HTTP/1.1 
   did not anticipate.

-> HTTP/2 is much faster and more efficient than HTTP/1.1. HTTP/2 is faster in how it prioritizes content during 
   loading Process.

-> HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other
   resources behind it. HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that 
   no one resource blocks any other resource.

-> In HTTP/1.1 each request had to wait for a response before the next request Could be sent. HTTP/2 uses multiplexing 
   to allow multiple concurrent requests and responses over a single TCP Connection.

-> HTTP/1.1 relies on the transport layer to avoid buffer overflow, so each new TCP connection requires a separate 
   flow control mechanism. HTTP/2 multiplexes streams within a single TCP connection.

-> The major feature differentiates HTTP/2 from HTTP/1.1 is the binary framing layer. Unlike HTTP/1.1, 
   HTTP/2 uses a binary framing layer.


   2)objects and its internal representation in Javascript:

-> Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript.

-> These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol)
   in the sense that while these primitive data-types all store a single value each (depending on their types).

-> Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.

-> An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value.

-> That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.

-> Objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 

-> These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

-> For Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.